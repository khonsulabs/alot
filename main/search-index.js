var searchIndex = JSON.parse('{\
"alot":{"doc":"alot","t":"DCCLLLLLLLLLLLLALLLLLADDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDIDDDDLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["LotId","Lots","OrderedLots","as_bytes","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","from_bytes","hash","into","ordered","partial_cmp","to_owned","try_from","try_into","type_id","unordered","Drain","EntryIter","IntoIter","Iter","OrderedLots","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","drain","drain_filter","drop","entries","eq","eq","eq","eq","eq","fmt","from","from","from","from","from","from_iter","get","get_by_index","get_mut","get_mut_by_index","index","index","index_mut","index_mut","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","key","len","new","next","next","next","next","pop","pop_entry","push","remove","sort","sort_by","sort_by_cached_key","sort_by_key","sort_unstable","sort_unstable_by","sort_unstable_by_key","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_capacity","Drain","DrainAll","DrainFilter","EntryIter","IntoIter","Iter","Lots","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","drain","drain_filter","drop","entries","eq","filter","filter","fmt","from","from","from","from","from","from","from_iter","get","get_mut","index","index_mut","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","new","next","next","next","next","push","remove","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity"],"q":[[0,"alot"],[22,"alot::ordered"],[119,"alot::unordered"]],"d":["A <code>LotId</code> is a single <code>usize</code>, encoding generation information …","","","Returns this ID as bytes. To decode the resulting bytes, …","","","","","","","","Returns the argument unchanged.","Decodes <code>bytes</code> that were previously encoded with <code>as_bytes()</code> …","","Calls <code>U::from(self)</code>.","An ordered collection of values, accessible by <code>LotId</code> or …","","","","","","An unordered collection of values, accessible by <code>LotId</code>.","An iterator over values being remoed from a <code>OrderedLots&lt;T&gt;</code>.","An iterator over an <code>OrderedLots&lt;T&gt;</code> that returns each …","An iterator that removes all values from the collection …","An iterator over all values contained in an <code>OrderedLots&lt;T&gt;</code>.","A collection of <code>T</code> values that maintains the order of …","","","","","","","","","","","","","","","","","","Returns an iterator that returns all the contained values …","Returns an iterator that invokes <code>filter</code> for each item in …","","Returns an <code>Iterator&lt;Item = (LotId, &amp;T)&gt;</code> for all contained …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Looks up a previously stored value by its <code>LotId</code>. If the …","Looks up a value by index. If <code>index</code> is greater than or …","Looks up a previously stored value by its <code>LotId</code>. If the …","Looks up a mutable reference to a value by index. If <code>index</code> …","","","","","Inserts <code>value</code> at <code>offset</code> inside of the collection.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns true if this collection has no values.","Returns an iterator of references to all contained values.","Returns the <code>LotId</code> associated with a given index. Returns …","Returns the number of values contained in this collection.","Returns a new, empty collection.","","","","","Removes the last element of the collection, if one is …","Removes the last element of the collection, if one is …","Adds <code>value</code> to the end of the collection, returning the …","Removes the value with the associated <code>LotId</code>, if found.","Orders the elements in this collection leveraging the …","Orders the elements in this collection leveraging the …","Orders the elements in this collection leveraging the …","Orders the elements in this collection leveraging the …","Orders the elements in this collection leveraging the …","Orders the elements in this collection leveraging the …","Orders the elements in this collection leveraging the …","","","","","","","","","","","","","","","","","","","Returns an empty collection that can hold <code>initial_capacity</code> …","An iterator over values being remoed from a <code>Lots&lt;T&gt;</code>.","A <code>DrainFilter</code> that drains all elements from a collection.","A filter for a <code>Drain</code> iterator.","An iterator over a <code>Lots&lt;T&gt;</code> that returns each contained …","An iterator that removes all values from the collection …","An iterator over all values contained in a <code>Lots&lt;T&gt;</code>.","A collection of <code>T</code>, organized by generational <code>LotId</code>s.","","","","","","","","","","","","","Removes all values from the collection.","","","","","","","","Returns an iterator that returns all the contained values …","Returns an iterator that invokes <code>filter</code> for each item in …","","Returns an <code>Iterator&lt;Item = (LotId, &amp;T)&gt;</code> for all contained …","","Return true if the value should be removed from the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Looks up a previously stored value by its <code>LotId</code>. If the …","Looks up a previously stored value by its <code>LotId</code>. If the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns true if this collection has no values.","Returns an iterator of references to all contained values.","Returns the number of values contained in this collection.","Returns a new, empty collection.","","","","","Adds <code>value</code> to the collection, returning the value’s …","Removes a previously stored value by its <code>LotId</code>. If the …","","","","","","","","","","","","","","","","","","","","","","Returns an empty collection that can hold <code>initial_capacity</code> …"],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,18,25,14,15,16,18,25,14,15,16,14,15,16,14,15,16,14,14,14,18,14,14,14,14,14,14,14,18,25,14,15,16,14,14,14,14,14,14,14,14,14,14,18,25,14,15,16,18,25,14,14,15,16,14,14,14,14,14,18,25,15,16,14,14,14,14,14,14,14,14,14,14,14,14,15,16,18,25,14,15,16,18,25,14,15,16,18,25,14,15,16,14,0,0,0,0,0,0,0,31,17,32,28,29,30,31,17,32,28,29,30,28,28,29,30,28,29,30,28,28,28,31,28,28,20,17,28,31,17,32,28,29,30,28,28,28,28,28,31,17,32,28,29,30,31,32,28,28,29,30,28,28,28,28,31,32,29,30,28,28,28,29,30,31,17,32,28,29,30,31,17,32,28,29,30,31,17,32,28,29,30,28],"f":[0,0,0,[1,[[3,[2]]]],[[]],[[]],[1,1],[[]],[[1,1],4],[[1,1],5],[[1,6],7],[[]],[[[8,[2]]],[[9,[1]]]],[[1,10]],[[]],0,[[1,1],[[9,[4]]]],[[]],[[],11],[[],11],[[],12],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[13]]],[[14,[13]]]],[[[15,[13]]],[[15,[13]]]],[[[16,[13]]],[[16,[13]]]],[[]],[[]],[[]],[[],14],[14,[[18,[17]]]],[[14,19],[[18,[19]]]],[[[18,[20]]]],[14,16],[[[14,[21]],[3,[21]]],5],[[[14,[21]],[14,[21]]],5],[[[14,[21]],[3,[21]]],5],[[[14,[21]],[8,[21]]],5],[[[14,[21]],[8,[21]]],5],[[[14,[22]],6],7],[[]],[[]],[[]],[[]],[[]],[23,14],[[14,1],9],[[14,24],9],[[14,1],9],[[14,24],9],[[14,24]],[[14,1]],[[14,24]],[[14,1]],[[14,24],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14],[14],[[]],[[]],[14,5],[14,15],[[14,24],[[9,[1]]]],[14,24],[[],14],[[[18,[20]]],9],[25,9],[15,9],[16,9],[14,9],[14,9],[14,1],[[14,1],9],[[[14,[26]]]],[[14,27]],[[14,19]],[[14,19]],[[[14,[26]]]],[[14,27]],[[14,19]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[24,14],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28],[[[28,[13]]],[[28,[13]]]],[[[29,[13]]],[[29,[13]]]],[[[30,[13]]],[[30,[13]]]],[[]],[[]],[[]],[[],28],[28,[[31,[17]]]],[[28,19],[[31,[19]]]],[[[31,[20]]]],[28,30],[[[28,[21]],[28,[21]]],5],[[],5],[17,5],[[[28,[22]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[23,28],[[28,1],9],[[28,1],9],[[28,1]],[[28,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28],[28],[[]],[[]],[28,5],[28,29],[28,24],[[],28],[[[31,[20]]],9],[32,9],[29,9],[30,9],[28,1],[[28,1],9],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[24,28]],"c":[],"p":[[3,"LotId"],[15,"u8"],[15,"array"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"slice"],[4,"Option"],[8,"Hasher"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"OrderedLots"],[3,"Iter"],[3,"EntryIter"],[3,"DrainAll"],[3,"Drain"],[8,"FnMut"],[8,"DrainFilter"],[8,"PartialEq"],[8,"Debug"],[8,"IntoIterator"],[15,"usize"],[3,"IntoIter"],[8,"Ord"],[8,"Fn"],[3,"Lots"],[3,"Iter"],[3,"EntryIter"],[3,"Drain"],[3,"IntoIter"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
